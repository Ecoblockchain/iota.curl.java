package com.iota.curl;

import org.junit.Assert;
import org.junit.Test;

import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.Arrays;
import java.util.stream.IntStream;

/**
 * Created by gianluigi.davassi on 13.10.16.
 */
public class HashTest {

    private static String in
    private static String tx
    private static String hash = "COIVKVQTQEHKZVAGBUFURRUG9CVXHWHCBIPKWNMIZDSSSRENFYYFOGTOTFMCEHLQKJ9PHKLWOH9XRHR99";

    @Test
    public void shouldHash() {
        final String hashed = IotaCurlHash.iotaCurlHash(tx, 2673);
        System.err.println(hashed);
        System.err.println(hash);
        Assert.assertEquals(hash, hashed);
    }

    @Test
    public void shouldDoHashTransform() {
        IotaCurlHash hash = new IotaCurlHash();
        int [] state = IntStream.generate(() -> 0).limit(1000).toArray();
        System.err.println(Arrays.toString(state));
        hash.doHashTransform(state);
    }

    @Test
    public void shoultTrytesToTrits() {
        int [] state = IntStream.generate(() -> 0).limit(1000).toArray();
        IotaCurlUtils.iotaCurlTrytes2Trits(state, 64, in.toCharArray(), (100-64));
        System.err.println(Arrays.toString(state));

        int [] test = { 0, 1, 1, 1, 1, 1, -1, 0, -1, -1, 0, 1, -1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, -1, 0, 1, -1, 0, 0, -1, 1, 0, 1, 0, -1, 0, -1, 1, -1, 0, -1, -1, 1, -1, -1, -1, -1, 0, 1, 0, 0, -1, -1, -1, -1, 1, 1, 0, 1, 1, 1, 1, 1, 0, -1, 0, -1, -1, 0, 1, 1, 1, 1, 1, -1, 0, 1, 0, 0, -1, 1, -1, -1, 0, 0, -1, -1, 0, 1, -1, -1, -1, -1, -1, 0, -1, -1, 1, 0, 1, -1, 0, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        Assert.assertArrayEquals(Arrays.copyOfRange(state, 0, 120), test);
    }

    @Test
    public void shouldWrapTooLongSigned() {
        long input = 0xffffffffffffffffL; // any long, e.g. -1
        final String base10 = IotaCurlUtils.literalUnsignedLong(input).toString(10);
        System.err.println(base10);
        System.err.println(0xffffffffffffffffL);
        System.err.println(Long.MAX_VALUE);
    }

    //https://s16.postimg.org/dthtvw3id/binary_curl.png
    private static boolean truth_r(boolean a, boolean b, boolean c, boolean d) {
        return ((a ^ d) ^ (!b || c));
    }

    private static boolean truth_l(boolean a, boolean b, boolean c, boolean d) {
        return ((b ^ c) || (truth_r(a,b,c,d)));
    }

    private static void truth(boolean a, boolean b, boolean c, boolean d) {
        System.err.println(!truth_r(a,b,c,d) + " " + truth_l(a,b,c,d));
    }

    @Test
    public void shouldBooleanLogicMatchTruthTable() {
        for (int i = 0; i<=10;i++) {
            System.err.println(IotaCurlUtils.TRUTH_TABLE[i]);
        }
        truth(true,true,true,true);
    }
}
